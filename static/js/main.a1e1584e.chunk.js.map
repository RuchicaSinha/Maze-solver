{"version":3,"sources":["models/Wall.js","utils/canvas.js","features/canvas/mazeSlice.js","features/canvas/canvas.js","utils/shuffle.js","utils/sleep.js","utils/randInt.js","features/solver/solverSlice.js","features/solver/solver.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["directions","N","S","E","W","opposite","dx","dy","drawLine","ctx","p1","p2","color","width","beginPath","prevCap","lineCap","prevWidth","lineWidth","prevColor","strokeStyle","moveTo","lineTo","stroke","drawPath","dim","x1","y1","x2","y2","fillCell","x","y","p","prev","fillStyle","fillRect","drawCellWalls","walls","tl","tr","bl","br","genMaze","size","maze","i","row","j","push","bgColor","mazeSlice","createSlice","name","initialState","height","reducers","newMaze","state","action","payload","setMaze","carveWall","direction","nx","ny","setCellColor","actions","selectMaze","MazeCanvas","props","canvasRef","useRef","useSelector","useEffect","canvas","current","getContext","clearRect","ref","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","sleep","ms","Promise","resolve","setTimeout","randInt","min","max","solverSlice","moves","clearMoves","addMove","move","selectMoves","solver","SolverCanvas","start","end","slice","c","arc","PI","fill","fillCircle","recursiveIteration","dispatch","a","dirs","dir","m","JSON","parse","stringify","sx","sy","App","useState","setSize","useDispatch","className","id","class","for","value","onInput","e","target","type","onClick","recursiveBacktrack","configureStore","reducer","solverReducer","mazeReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1e1584e.chunk.js","sourcesContent":["export const directions = {\n    N: 1, //rightmost-bit\n    S: 2, \n    E: 4,\n    W: 8,\n}\n\nexport const opposite = {\n    N: directions.S,\n    S: directions.N,\n    E: directions.W,\n    W: directions.E\n}\n\nexport const dx = {\n    N: 0,\n    S: 0,\n    E: 1,\n    W: -1\n}\n\nexport const dy = {\n    N: -1,\n    S: 1,\n    E: 0,\n    W: 0,\n}\n","import { directions } from \"../models/Wall\";\n\nexport function drawLine(ctx, p1, p2, color, width) {\n    ctx.beginPath();\n    const prevCap = ctx.lineCap;\n    const prevWidth = ctx.lineWidth;\n    const prevColor = ctx.strokeStyle;\n    ctx.lineCap = \"round\";\n    ctx.lineWidth = width || 3;\n    ctx.strokeStyle = color || \"#fafafa\";\n    ctx.moveTo(p1[0], p1[1]);\n    ctx.lineTo(p2[0], p2[1]);\n    ctx.stroke();\n    ctx.lineCap = prevCap;\n    ctx.lineWidth = prevWidth;\n    ctx.strokeStyle = prevColor;\n}\n\nexport function drawPath(ctx, dim, x1, y1, x2, y2) {\n    const c1 = [x1 * dim + (dim / 2), y1 * dim + (dim / 2)];\n    const c2 = [x2 * dim + (dim / 2), y2 * dim + (dim / 2)];\n    drawLine(ctx, c1, c2, \"rgba(0,255,0,1)\", 7);\n}\n\nexport function fillCircle(ctx, p, dim, color) {\n    const c = [p[0] * dim + (dim / 2), p[1] * dim + (dim / 2)];\n    ctx.beginPath();\n    ctx.arc(c[0], c[1], (dim/3)-(dim/10), 0, 2 * Math.PI, false);\n    const prev = ctx.fillStyle;\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.lineWidth = 3;\n    ctx.strokeStyle = '#FFFFFF';\n    ctx.stroke();\n    ctx.fillStyle = prev;\n}\n\nexport function fillRect(ctx, p, dim, color) {\n    const prev = ctx.fillStyle;\n    ctx.fillStyle = color;\n    ctx.fillRect(p[0], p[1], dim, dim);\n    ctx.fillStyle = prev;\n}\n\nexport function fillCell(ctx, dim, color, x, y) {\n    const tl = [x * dim, y * dim];\n    fillRect(ctx, tl, dim, color);\n}\n\nexport function drawCellWalls(ctx, walls, dim, x, y) {\n    const tl = [x * dim, y * dim];\n    const tr = [x * dim + dim, y * dim];\n    const bl = [x * dim, y * dim + dim];\n    const br = [x * dim + dim, y * dim + dim];\n    if ((walls & directions.N) === 0) { //0110 and 0001\n        drawLine(ctx, tl, tr);\n    }\n\n    if ((walls & directions.E) === 0) { //0110 and 0100\n        drawLine(ctx, tr, br);\n    }\n\n    if ((walls & directions.W) === 0) {\n        drawLine(ctx, tl, bl);\n    }\n\n    if ((walls & directions.S) === 0) {\n        drawLine(ctx, bl, br);\n    }\n}","import { createSlice } from \"@reduxjs/toolkit\";\nimport { directions, dx, dy, opposite } from \"../../models/Wall\";\n\nfunction genMaze(size) {\n    const maze = [];\n    for (let i = 0; i < size; i++) {\n        const row = [];\n        for (let j = 0; j < size; j++) {\n            row.push({\n                walls: 0,\n                bgColor: 'rgba(0,0,0,0)',\n            });\n        }\n        maze.push(row);\n    }\n    return maze;\n}\n\nexport const mazeSlice = createSlice({\n    name: 'maze',\n    initialState: {\n        maze: {\n            width: 10,\n            height: 10,\n            maze: genMaze(10),\n        }\n    },\n    reducers: {\n        newMaze: (state, action) => {\n            const { size } = action.payload;\n            state.maze.width = size;\n            state.maze.height = size;\n            state.maze.maze = genMaze(size);\n        },\n        setMaze: (state, action) => {\n            const { maze } = action.payload;\n            state.maze.maze = maze;\n        },\n        carveWall: (state, action) => {\n            const { x, y, direction } = action.payload;\n            const nx = x + dx[direction];\n            const ny = y + dy[direction];\n\n            state.maze.maze[y][x].walls |= directions[direction];\n            state.maze.maze[ny][nx].walls |= opposite[direction];\n        },\n        setCellColor: (state, action) => {\n            const { x, y, color } = action.payload;\n            state.maze.maze[y][x].bgColor = color;\n        }\n    }\n});\n\nexport const { newMaze, setMaze, carveWall, setCellColor } = mazeSlice.actions;\nexport const selectMaze = state => state.maze.maze;\n\nexport default mazeSlice.reducer;\n","import React, { useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { drawCellWalls, fillCell } from \"../../utils/canvas\";\nimport { selectMaze } from \"./mazeSlice\";\n\n\nexport function MazeCanvas(props) {\n    const { size } = props;\n    const canvasRef = useRef(null);\n\n    const maze = useSelector(selectMaze);\n\n    useEffect(() => {\n        const dim = size / maze.width;\n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        for (let i = 0; i < maze.width; i++) {\n            for (let j = 0; j < maze.height; j++) {\n                fillCell(ctx, dim, maze.maze[j][i].bgColor, i, j);\n            }\n        }\n        for (let i = 0; i < maze.width; i++) {\n            for (let j = 0; j < maze.height; j++) {\n                drawCellWalls(ctx, maze.maze[j][i].walls, dim, i, j)\n            }\n        }\n    }, [maze, size]);\n\n    return <canvas ref={canvasRef} width={size} height={size} />\n}","export default function shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }","export default function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }","export default function randInt(min, max) { // min and max included \n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const solverSlice = createSlice({\n    name: 'solver',\n    initialState: {\n        moves: [],\n    },\n    reducers: {\n        clearMoves: state => {\n            state.moves = [];\n        },\n        addMove: (state, action) => {\n            const { move } = action.payload;\n            state.moves.push(move);\n        }\n    },\n})\n\nexport const { clearMoves, addMove } = solverSlice.actions;\n\nexport const selectMoves = state => state.solver.moves;\n\nexport default solverSlice.reducer;\n","import React, { useEffect, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { drawPath, fillCell, fillCircle } from \"../../utils/canvas\";\nimport { selectMaze } from \"../canvas/mazeSlice\";\nimport { selectMoves } from \"./solverSlice\";\n\nexport function SolverCanvas(props) {\n    const { size } = props;\n    const canvasRef = useRef(null);\n    // const dispatch = useDispatch();\n\n    const maze = useSelector(selectMaze);\n    const moves = useSelector(selectMoves);\n\n    const start = [0,maze.height-1]\n    const end = [maze.width-1, 0]\n\n    useEffect(() => {\n        const dim = size/maze.width;\n        const canvas = canvasRef.current;\n\n        const ctx = canvas.getContext('2d')\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        fillCell(ctx, dim, \"rgba(255,0,0,0.5)\", start[0], start[1]);\n        fillCell(ctx, dim, \"rgba(0,255,0,0.5)\", end[0], end[1]);\n\n        if (moves.length >= 2) {\n            let prev = moves[0];\n            for (const move of moves.slice(1)) {\n                drawPath(ctx, dim, prev[0], prev[1], move[0], move[1]);\n                prev = move;\n            }\n            fillCircle(ctx, prev, dim, \"rgba(0,255,0,1)\")\n        }\n        \n    }, [maze, moves, size, start, end])\n\n    return <canvas ref={canvasRef} width={size} height={size} />\n}\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { MazeCanvas } from './features/canvas/canvas';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { carveWall, newMaze, selectMaze, setCellColor } from './features/canvas/mazeSlice';\r\nimport { directions, dx, dy, opposite } from './models/Wall';\r\nimport shuffle from './utils/shuffle';\r\nimport sleep from './utils/sleep';\r\nimport randInt from './utils/randInt';\r\nimport { SolverCanvas } from './features/solver/solver';\r\n\r\n\r\nasync function recursiveIteration(x, y, maze, dispatch) {\r\n  const dirs = [\"N\", \"S\", \"E\", \"W\"];\r\n  shuffle(dirs); //W\r\n  await dispatch(setCellColor({\r\n    x,\r\n    y,\r\n    color: \"rgba(78, 5, 121, 0.7)\"\r\n  }));\r\n  // xy 00, shuffle EWSN\r\n  // xy 10, shuffle NEWS\r\n  // xy 20\r\n\r\n  //xy 01\r\n  for (const dir of dirs) { //dir E, starting 00\r\n    const nx = x + dx[dir]; \r\n    const ny = y + dy[dir];\r\n    if ((nx >= 0 && nx < maze.width) && (ny >= 0 && ny < maze.height) && (maze.maze[ny][nx].walls === 0)) {\r\n      maze.maze[y][x].walls |= directions[dir]; //wall initally 0000, 0100\r\n      maze.maze[ny][nx].walls |= opposite[dir];\r\n      await dispatch(carveWall({\r\n        x,\r\n        y,\r\n        direction: dir\r\n      }));\r\n      await sleep(5);\r\n      await recursiveIteration(nx, ny, maze, dispatch);\r\n    }\r\n  }\r\n  await dispatch(setCellColor({\r\n    x,\r\n    y,\r\n    color: \"rgba(0,0,0,0)\"\r\n  }));\r\n  await sleep(5);\r\n}\r\n\r\nasync function recursiveBacktrack(maze, dispatch) {\r\n  const m = JSON.parse(JSON.stringify(maze));\r\n  const sx = randInt(0, maze.width - 1);\r\n  const sy = randInt(0, maze.height - 1);\r\n  await recursiveIteration(sx, sy, m, dispatch);\r\n}\r\n\r\nfunction App() {\r\n  const [size, setSize] = useState(10);\r\n  const dispatch = useDispatch();\r\n  const maze = useSelector(selectMaze);\r\n  return (\r\n    <div className=\"App\">\r\n        <h1>Maze <span id=\"solver\">Solver</span></h1>\r\n\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6\">\r\n              <div class=\"form-group\">\r\n                <label for=\"number\">Enter Maze Size</label>\r\n                <input value={size} onInput={e => setSize(e.target.value)} id=\"number\" type=\"number\"></input>\r\n                <button class=\"btn btn-primary\" onClick={() => dispatch(newMaze({ size }))}>Initialize!</button>\r\n              </div>\r\n              <br></br>\r\n\r\n              <div class=\"form-group\">\r\n                <label for=\"generationAlgo\">Select Maze generation algorithm</label>\r\n                <select id=\"generationAlgo\">\r\n                  <option value=\"recursive\">Recursive Backtracking</option>\r\n                  <option value=\"kruskal\">Kruskal Algorithm</option>\r\n                </select>\r\n                <button class=\"btn btn-primary\" onClick={() => { recursiveBacktrack(maze, dispatch) }}>Generate Maze!</button>\r\n              </div>\r\n              <br></br>\r\n\r\n              <div class=\"form-group\">\r\n                <label for=\"solvingAlgo\">Select Maze solving algorithm</label>\r\n                <select id=\"solvingAlgo\">\r\n                  <option value=\"recursive\">Recursive Backtracking</option>\r\n                  <option value=\"kruskal\">Kruskal Algorithm</option>\r\n                </select>\r\n                <button class=\"btn btn-success\">Solve Maze!</button>\r\n              </div>\r\n            </div>\r\n\r\n            <br></br>\r\n            <br></br>\r\n\r\n\r\n            <div className=\"col-md-6\">\r\n              <div class=\"canvasContainer\">\r\n                <MazeCanvas size={500} />\r\n                <SolverCanvas size={500} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n        </div>\r\n\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport solverReducer from '../features/solver/solverSlice';\r\nimport mazeReducer from '../features/canvas/mazeSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    solver: solverReducer,\r\n    maze: mazeReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}